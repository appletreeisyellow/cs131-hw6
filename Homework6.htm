<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
lang="en"><head><title>Homework 6</title>
</head>


<body>

<h1>Homework 6: Logic Programming</h1>

<h2>Due Tuesday, May 31 at 11:30pm</h2>
<h3>Turn in your homework as a text file called <tt>hw6.pl</tt> via the course home page.  Please make sure the file has
exactly that name.</h3>

<h3>Make sure the file can be successfully loaded into the <tt>gprolog</tt>.  There should be <i>no compilation errors</i>;
if not you get an automatic 0 for the homework!</h3>

<h3>Recall the CS131 Academic Honesty Policy!  You must list whom you
discussed the assignment with at the top of your assignment, and also what
other resources you used.</h3>


<p>For this assignment you will get some experience programming in a (almost) fully declarative language.

<p>Some rules and advice:
<ul>
  <li>You may define any number of helper predicates as needed to solve
the following problems.</li>
<li>You may use predicates from the GNU Prolog library (see the
<a href="http://www.gprolog.org/manual/gprolog.html">GNU Prolog Manual</a>) except where
explicitly disallowed.
<li>Your code
should never go into an infinite loop except where explicitly allowed.</li>
<li>Your code should never use the cut (<tt>!</tt>) operator.
<li>Except where explicitly indicated, your code
need not produce solutions in a particular order, as long as it produces all and only correct solutions and
produces each solution the right number of times.
</li>
<li>Some of these problems are computationally hard (e.g., NP-complete).  For such problems especially,
the order in which you put subgoals in a rule can make a <i>big</i> difference on running time.  In general
the best strategy is to put the <i>strongest</i> constraints earliest, i.e., the constraints that will
prune the search space the most.
</li>
</ul>


To test your code, make a text file that has a bunch of queries that you want to input at the interpreter.
You need to use a predicate like <tt>findall</tt> or <tt>bagof</tt> so that the
interpreter will collect all solutions rather than providing them one
at a time and asking if you want more.
For example, the file could have the following form:
<pre>
consult(hw6).
findall(Y, duplist([1,2,3], Y), L), L = [[1,1,2,2,3,3]].
... a bunch of other queries to use as tests
</pre>

If this file is called hw6Test, then you can do "gprolog < hw6Test" to run all the tests.

<p>
Now on to the assignment!  <b>Make sure your predicates have the exact same names and order of arguments as described below.  Otherwise the tests will fail and you will get no credit.</b>

<ol>
   <li>Implement a predicate <tt>duplist(X,Y)</tt> which succeeds whenever
  list <tt>Y</tt> is simply list <tt>X</tt> with each element duplicated.
  For example:

<pre>
| ?- duplist([1,2,3], Y).

Y = [1,1,2,2,3,3]
</pre>

Make sure that your predicate works in both directions.  For example, you should
be able to ask the query <tt>duplist(X, [1,1,2,2,3,3])</tt> and get the right
value of <tt>X</tt>.<p></li>

<li>
Define a predicate <tt>subseq(X,Y)</tt> that succeeds if list <tt>X</tt> is
a <i>subsequence</i> of list <tt>Y</tt>, which means that
<tt>X</tt> can be obtained by removing zero or more elements from
anywhere within
<tt>Y</tt>.  Note that this means that the elements in <tt>X</tt>
have to be in the same order as they are in <tt>Y</tt>.  For example,
<tt>[1,3]</tt> is a subsequence of <tt>[1,2,3]</tt>, but
<tt>[3,1]</tt> is not.
<b>You may not use the built-in predicate
<tt>sublist</tt> in your solution.</b>
  
<p>  In addition to checking whether
one concrete list is a subsequence of another concrete list, your
solution should be able to produce all subsequences of a given
concrete list (but is allowed to produce those solutions in any order).  For example:
<pre>
| ?- subseq(X, [1,2]).

X = [1,2] ? ;

X = [1] ? ;

X = [2] ? ;

X = [] ? ;
</pre></li>

<p><li>In this problem you will define a predicate to solve <a href="http://en.wikipedia.org/wiki/Verbal_arithmetic">verbal arithmetic</a> puzzles.  In the special case we'll consider, you're given three words and have to
find a digit for each letter such that word1 + word2 = word3.  Each letter must have a distinct digit between
0 and 9, and the first letter of each word cannot have the value 0.  Your predicate <tt>verbalarithmetic</tt>
will take four argument lists (in this order):  a list of all the letters in the problem (in any order), followed by three
lists representing the three words in the puzzle.  For example:

<pre>
| ?- verbalarithmetic([S,E,N,D,M,O,R,Y],[S,E,N,D],[M,O,R,E],[M,O,N,E,Y]).

D = 7
E = 5
M = 1
N = 6
O = 0
R = 8
S = 9
Y = 2 ? ;

| ?- verbalarithmetic([C,O,A,L,S,I],[C,O,C,A],[C,O,L,A],[O,A,S,I,S]).    

A = 6
C = 8
I = 9
L = 0
O = 1
S = 2 ? ;
</pre>
<p>
<i>Hint: You may find gprolog's <tt>fd_all_different</tt> predicate useful.</i>
<p></li>

<p><li>In this problem, you will write a Prolog program to solve a form
of the <i>blocks world</i> problem, which is a famous problem from
artificial intelligence.  Imagine you have three stacks of blocks in a
particular configuration, and the goal is to move blocks around so
that the three stacks end up in some other configuration.
You have a robot that knows how to
do two kinds of actions.  First, the robot
can pick up the top block from a stack,
as long as that stack is nonempty and the robot's mechanical hand is
free.  Second, the robot can place a block from its hand on to a
stack.

<p> Implement a Prolog relation <tt>blocksworld</tt> that has three
arguments: a start world, a list of actions, and a goal world.  The
predicate should only succeed if the given list of actions does in
fact take you from the start to the goal.

<p>We will represent a world as a data structure
<tt>world</tt> that has four components:  three lists to represent
the three stacks, and a component to represent the contents of the
mechanical hand.  That last component either contains a single block
or the constant <tt>none</tt>, to represent the fact that the hand is
empty.  Your implementation should not care what the blocks actually
look like; the users can provide any constants they wish to stand for
blocks.  For example, 
<tt>world([a,b,c],[],[d],none)</tt> represents a world in
which there are four blocks, with three of them in the first stack
(in the specified order, with <tt>a</tt> at the top of the stack), the
fourth block on the third stack, and nothing in the mechanical hand.

<p>We will use the constants <tt>stack1</tt>, <tt>stack2</tt>, and <tt>stack3</tt>
to represent the three stacks.  There are two kinds of actions,
<tt>pickup(B,S)</tt> and <tt>putdown(B,S)</tt>, corresponding to the two
robot actions described above, where <tt>B</tt> is a block and <tt>S</tt> is one of the three stack constants.

<p>For example, here is a sample query:
<pre>
| ?- length(Actions,L), blocksworld(world([a,b,c],[],[],none), Actions, world([],[],[a,b,c],none)). 

Actions = [pickup(a,stack1),putdown(a,stack2),pickup(b,stack1),putdown(b,stack2),pickup(c,stack1),putdown(c,stack3),pickup(b,stack2),putdown(b,stack3),pickup(a,stack2),putdown(a,stack3)]
L = 10 ?
</pre>

<p>Notice how I use <tt>length</tt> to limit the size of the resulting
list of actions.  This is necessary to do when you test your code, in
order to prevent Prolog from getting stuck
down infinite paths (e.g., continually picking up and putting down the
same block).
<p></li>

</ol>  

</body></html>
